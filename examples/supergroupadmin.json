[{"id":"536f2bb1f841a3c3","type":"telegram receiver","z":"89e16d21b4d07ec8","name":"","bot":"3b6bfbc0.423a04","saveDataDir":"","filterCommands":false,"x":190,"y":280,"wires":[["abdd4c51e2ca5c21","605ed1f59b09fb13"],[]]},{"id":"abdd4c51e2ca5c21","type":"function","z":"89e16d21b4d07ec8","name":"filter using function","func":"// 1. Find out if we are in the correct chat and if the message was from admin\nvar fromChat = msg.payload.chatId;\nif(fromChat === -1001179754637 && msg.originalMessage.from !== undefined) {\n\n    var fromUser = msg.originalMessage.from.username;\n    if(fromUser === 'Windhose') {\n    \n        // 2. Check if admin replied to a message\n        var replyToMessage = msg.originalMessage.reply_to_message;\n        var replyMessage = msg.originalMessage.text;\n        if(replyToMessage !== undefined){\n\n            // 3. take some action for user\n            var userToHandle = replyToMessage.from.id;\n            \n            switch(replyMessage)\n            {\n                case 'promote':\n                    node.send([msg, null]);\n                    break;\n                    \n                case 'restrict':\n                    node.send([null, msg]);\n                    break;\n            }\n        }\n    }\n}","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":220,"wires":[["e2840703597c9a47"],["3d6e140705fde04a"]]},{"id":"605ed1f59b09fb13","type":"switch","z":"89e16d21b4d07ec8","name":"filter chat","property":"payload.chatId","propertyType":"msg","rules":[{"t":"eq","v":"-1001179754637","vt":"num"}],"checkall":"true","repair":false,"outputs":1,"x":380,"y":440,"wires":[["e519afc188b6bde9"]]},{"id":"e519afc188b6bde9","type":"switch","z":"89e16d21b4d07ec8","name":"filterAdmin","property":"originalMessage.from.username","propertyType":"msg","rules":[{"t":"eq","v":"Windhose","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":530,"y":440,"wires":[["fb5ce2991de74d19"]]},{"id":"fb5ce2991de74d19","type":"switch","z":"89e16d21b4d07ec8","name":"filterReply","property":"originalMessage.reply_to_message","propertyType":"msg","rules":[{"t":"nempty"}],"checkall":"true","repair":false,"outputs":1,"x":680,"y":440,"wires":[["28a5b6d57c0469b5"]]},{"id":"28a5b6d57c0469b5","type":"switch","z":"89e16d21b4d07ec8","name":"switch command","property":"originalMessage.text","propertyType":"msg","rules":[{"t":"eq","v":"promote","vt":"str"},{"t":"eq","v":"restrict","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":850,"y":440,"wires":[["8df737db91c30604"],["b0d5a4b29d940893"]]},{"id":"8df737db91c30604","type":"debug","z":"89e16d21b4d07ec8","name":"promote","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1080,"y":400,"wires":[]},{"id":"b0d5a4b29d940893","type":"debug","z":"89e16d21b4d07ec8","name":"restrict","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1070,"y":460,"wires":[]},{"id":"d5b63accc03810cf","type":"comment","z":"89e16d21b4d07ec8","name":"SuperGroup Admin Example","info":"Example flow for demonstration how to handle replies to messages sent by user to issue admin actions.\n\nRight click on a message of a user and reply to that message using one of the predefined example command:\n- \"promote\" to make user admin\n- \"restrict\" to make admin a normal user","x":180,"y":160,"wires":[]},{"id":"e2840703597c9a47","type":"function","z":"89e16d21b4d07ec8","name":"promote user","func":"// Note that it makes adifference if you are in a channel or group or super group.\n// whenever you get an exception saying RIGHT_FORBIDDEN, then make sure that only valid fields are set.\n// This example is tested with super group and hence can_post_messages and can_edit_messages are not set.\n\nvar user = msg.originalMessage.reply_to_message.from.id;\nmsg.payload.type = 'promoteChatMember';\nmsg.payload.content = user;\nmsg.payload.options = {\n    is_anonymous : false,         // Pass True, if the administrator's presence in the chat is hidden\n    can_manage_chat\t: true,       //\tPass True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege\n    // can_post_messages : true,     // Pass True, if the administrator can create channel posts, channels only\n    // can_edit_messages : true,     // Pass True, if the administrator can edit messages of other users and can pin messages, channels only\n    can_delete_messages\t: true,   // Pass True, if the administrator can delete messages of other users\n    can_manage_voice_chats : true,// Pass True, if the administrator can manage voice chats\n    can_restrict_members : true,  // Pass True, if the administrator can restrict, ban or unban chat members\n    can_promote_members\t: true,   // Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)\n    can_change_info\t: true,       // Pass True, if the administrator can change chat title, photo and other settings\n    can_invite_users : true,      // Pass True, if the administrator can invite new users to the chat\n    can_pin_messages : true,      // Pass True, if the administrator can pin messages, supergroups only    \n};\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":200,"wires":[["920f8aa4b115d3ba"]]},{"id":"920f8aa4b115d3ba","type":"telegram sender","z":"89e16d21b4d07ec8","name":"","bot":"3b6bfbc0.423a04","haserroroutput":false,"outputs":1,"x":930,"y":240,"wires":[[]]},{"id":"3b80dde7ad1d295c","type":"comment","z":"89e16d21b4d07ec8","name":"Example 1","info":"Filtering can be done using a function node.","x":380,"y":180,"wires":[]},{"id":"1a540792c87c362b","type":"comment","z":"89e16d21b4d07ec8","name":"Example 2","info":"Filtering can be done using a series of switch nodes.","x":380,"y":380,"wires":[]},{"id":"3d6e140705fde04a","type":"function","z":"89e16d21b4d07ec8","name":"restrict user","func":"        \n        debugger\n        \n        \nvar user = msg.originalMessage.reply_to_message.from.id;\nmsg.payload.type = 'restrictChatMember';\nmsg.payload.content = user;\nmsg.payload.options = {\n    can_send_messages : false,         // Optional. True, if the user is allowed to send text messages, contacts, locations and venues\n    can_send_media_messages : false,   // Optional. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages\n    can_send_polls : false,            // Optional. True, if the user is allowed to send polls, implies can_send_messages\n    can_send_other_messages\t: false,   // Optional. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can_send_media_messages\n    can_add_web_page_previews : false, // Optional. True, if the user is allowed to add web page previews to their messages, implies can_send_media_messages\n    can_change_info : false,           // Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups\n    can_invite_users : false,          // Optional. True, if the user is allowed to invite new users to the chat\n    can_pin_messages : false,          // Optional. True, if the user is allowed to pin messages. Ignored in public supergroups   \n};\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":260,"wires":[["920f8aa4b115d3ba"]]},{"id":"3b6bfbc0.423a04","type":"telegram bot","botname":"HeinzBot","usernames":"","chatids":"","baseapiurl":"","updatemode":"polling","pollinterval":"300","usesocks":false,"sockshost":"","socksport":"6667","socksusername":"anonymous","sockspassword":"","bothost":"","botpath":"","localbotport":"8443","publicbotport":"8443","privatekey":"","certificate":"","useselfsignedcertificate":false,"sslterminated":false,"verboselogging":false}]